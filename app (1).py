# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zVgIRFB7bsS8FDhRcrjY-TAAhP5rV8qP
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from sqlalchemy import create_engine

# -----------------------------
# Streamlit Page Config
# -----------------------------
st.set_page_config(page_title="Food Wastage Dashboard", layout="wide")

# -----------------------------
# Database Connection
# -----------------------------
def get_connection():
    USER = "postgres"          # change if different
    PASSWORD = "2322" # 🔑 update here
    HOST = "localhost"         # or your pgAdmin server IP
    PORT = "5432"              # default PostgreSQL port
    DBNAME = "food_wastage"   # replace with your DB
    engine = create_engine(f"postgresql+psycopg2://{USER}:{PASSWORD}@{HOST}:{PORT}/{DBNAME}")
    return engine

def run_query(query):
    engine = get_connection()
    with engine.connect() as conn:
        return pd.read_sql(query, conn)

# -----------------------------
# Sidebar Menu
# -----------------------------
st.sidebar.title("📊 Dashboard Menu")
menu = st.sidebar.radio(
    "Select Section:",
    [
        "KPIs",
        "Providers by City",
        "Near Expiry Food",
        "Completed Claims Over Time",
        "Top 10 Providers",
        "Food Type Ranking",
        "Receivers by City",
        "Cancellation Rate",
        "Run Custom Query"
    ]
)

# -----------------------------
# KPIs
# -----------------------------
if menu == "KPIs":
    st.header("📌 Key Performance Indicators")
    df = run_query("SELECT * FROM v_fw_kpis;")
    kpi = df.iloc[0]

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Providers", kpi["total_providers"])
    col2.metric("Total Receivers", kpi["total_receivers"])
    col3.metric("Completed Claims", kpi["completed_claims"])
    col4.metric("Pending Claims", kpi["pending_claims"])

# -----------------------------
# Providers by City
# -----------------------------
elif menu == "Providers by City":
    st.header("🏙️ Providers by City")
    df = run_query("SELECT * FROM v_fw_providers_by_city;")
    fig = px.bar(df, x="city", y="provider_count", title="Providers Count by City", color="provider_count")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df)

# -----------------------------
# Near Expiry Food
# -----------------------------
elif menu == "Near Expiry Food":
    st.header("⚠️ Food Near Expiry (Next 3 Days)")
    df = run_query("SELECT * FROM v_fw_near_expiry;")
    st.dataframe(df)

# -----------------------------
# Completed Claims Over Time
# -----------------------------
elif menu == "Completed Claims Over Time":
    st.header("📈 Completed Claims by Day")
    df = run_query("SELECT * FROM v_fw_completed_by_day;")
    fig = px.line(df, x="claim_date", y="completed_count", title="Completed Claims Over Time")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df)

# -----------------------------
# Top 10 Providers
# -----------------------------
elif menu == "Top 10 Providers":
    st.header("🏆 Top 10 Providers by Quantity")
    df = run_query("""
        SELECT Provider_ID, Name, City, SUM(Quantity) AS total_qty
        FROM food_wastage
        GROUP BY Provider_ID, Name, City
        ORDER BY total_qty DESC
        LIMIT 10;
    """)
    fig = px.bar(df, x="name", y="total_qty", color="city", title="Top 10 Providers by Quantity")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df)

# -----------------------------
# Food Type Ranking
# -----------------------------
elif menu == "Food Type Ranking":
    st.header("🍲 Food Type Ranking")
    df = run_query("""
        SELECT Food_Type, SUM(Quantity) AS total_qty, COUNT(*) AS claims
        FROM food_wastage
        GROUP BY Food_Type
        ORDER BY total_qty DESC;
    """)
    fig = px.bar(df, x="food_type", y="total_qty", title="Food Type by Quantity", color="total_qty")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df)

# -----------------------------
# Receivers by City
# -----------------------------
elif menu == "Receivers by City":
    st.header("🙋 Receivers by City")
    df = run_query("""
        SELECT City_receiver, COUNT(*) AS claim_count
        FROM food_wastage
        GROUP BY City_receiver
        ORDER BY claim_count DESC;
    """)
    fig = px.bar(df, x="city_receiver", y="claim_count", title="Receivers by City", color="claim_count")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df)

# -----------------------------
# Cancellation Rate
# -----------------------------
elif menu == "Cancellation Rate":
    st.header("❌ Cancellation Rate (%)")
    df = run_query("""
        SELECT ROUND(100.0 * SUM(CASE WHEN Status='Cancelled' THEN 1 ELSE 0 END) / COUNT(*), 2) AS cancellation_rate_pct
        FROM food_wastage;
    """)
    rate = df.iloc[0]["cancellation_rate_pct"]
    st.metric("Cancellation Rate", f"{rate}%")
    st.dataframe(df)

# -----------------------------
# Run Custom Query
# -----------------------------
elif menu == "Run Custom Query":
    st.header("🛠️ Run Your Own SQL Query")
    user_query = st.text_area("Enter SQL query:", "SELECT * FROM food_wastage LIMIT 5;")
    if st.button("Run"):
        try:
            df = run_query(user_query)
            st.dataframe(df)

            # Auto chart if numeric
            if len(df.columns) >= 2:
                num_cols = df.select_dtypes(include="number").columns
                if len(num_cols) >= 1:
                    fig = px.bar(df, x=df.columns[0], y=num_cols[0], title="Query Result Chart")
                    st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Error: {e}")