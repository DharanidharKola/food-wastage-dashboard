# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d0DZ-7WbbZ4OFYzj2KCSAaM1fbOWsgHI
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# -------------------------
# Page Config
# -------------------------
st.set_page_config(page_title="Food Wastage Dashboard", layout="wide")

# -------------------------
# Load Data
# -------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("Food_Wastage.csv")
    df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
    df['Expiry_Date'] = pd.to_datetime(df['Expiry_Date'], errors='coerce')
    return df

df = load_data()

# -------------------------
# Sidebar Filters
# -------------------------
st.sidebar.header("Filters")

# City Filter
city_options = st.sidebar.multiselect(
    "Select City:",
    options=df["City"].unique(),
    default=df["City"].unique()
)

# Food Type Filter
food_type_options = st.sidebar.multiselect(
    "Select Food Type:",
    options=df["Food_Type"].unique(),
    default=df["Food_Type"].unique()
)

# Date Range Filter
min_date = df["Timestamp"].min()
max_date = df["Timestamp"].max()
date_range = st.sidebar.date_input(
    "Select Date Range:",
    value=[min_date, max_date],
    min_value=min_date,
    max_value=max_date
)

# Apply Filters
df_filtered = df[
    (df["City"].isin(city_options)) &
    (df["Food_Type"].isin(food_type_options)) &
    (df["Timestamp"].dt.date.between(date_range[0], date_range[1]))
]

# -------------------------
# KPIs
# -------------------------
st.title("üçΩÔ∏è Food Wastage Dashboard")
col1, col2, col3 = st.columns(3)

col1.metric("Total Claims", value=len(df_filtered))
col2.metric("Total Quantity", value=df_filtered["Quantity"].sum())
col3.metric("Active Cities", value=df_filtered["City"].nunique())

st.markdown("---")

# -------------------------
# Charts
# -------------------------

# Bar chart - Food Quantity by City
fig_city = px.bar(
    df_filtered.groupby("City")["Quantity"].sum().reset_index(),
    x="City", y="Quantity",
    title="Food Quantity by City",
    color="Quantity",
    color_continuous_scale="Blues"
)
st.plotly_chart(fig_city, use_container_width=True)

# Pie chart - Food Type Distribution
fig_food_type = px.pie(
    df_filtered,
    names="Food_Type",
    title="Food Type Distribution",
    hole=0.4
)
st.plotly_chart(fig_food_type, use_container_width=True)

# Line chart - Claims Over Time
claims_by_date = df_filtered.groupby(df_filtered["Timestamp"].dt.date).size().reset_index(name="Claims")
fig_line = px.line(
    claims_by_date,
    x="Timestamp", y="Claims",
    title="Claims Over Time"
)
st.plotly_chart(fig_line, use_container_width=True)

# -------------------------
# Data Table
# -------------------------
st.subheader("üìÑ Data Preview")
st.dataframe(df_filtered)

# Download Button
csv_download = df_filtered.to_csv(index=False).encode('utf-8')
st.download_button(
    label="Download Filtered Data as CSV",
    data=csv_download,
    file_name="filtered_food_wastage.csv",
    mime="text/csv"
)

